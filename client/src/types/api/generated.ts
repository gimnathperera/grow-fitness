/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health check endpoint */
    get: operations['AppController_getHealth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a new user */
    post: operations['AuthController_register'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login user */
    post: operations['AuthController_login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh access token */
    post: operations['AuthController_refresh'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout user */
    post: operations['AuthController_logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current user profile */
    get: operations['AuthController_getProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/change-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Change user password */
    post: operations['AuthController_changePassword'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/forgot-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request password reset */
    post: operations['AuthController_forgotPassword'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/reset-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Reset password with token */
    post: operations['AuthController_resetPassword'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all users (Admin/Team only) */
    get: operations['UsersController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user by ID (Admin/Team only) */
    get: operations['UsersController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update user (Admin/Team only) */
    patch: operations['UsersController_update'];
    trace?: never;
  };
  '/coaches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all coaches */
    get: operations['CoachesController_findAll'];
    put?: never;
    /** Create a new coach profile */
    post: operations['CoachesController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/coaches/available': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get available coaches */
    get: operations['CoachesController_getAvailableCoaches'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/coaches/my-profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current coach profile */
    get: operations['CoachesController_getMyProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/coaches/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get coach by ID */
    get: operations['CoachesController_findOne'];
    put?: never;
    post?: never;
    /** Delete coach */
    delete: operations['CoachesController_remove'];
    options?: never;
    head?: never;
    /** Update coach */
    patch: operations['CoachesController_update'];
    trace?: never;
  };
  '/coaches/{id}/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get coach statistics */
    get: operations['CoachesController_getCoachStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clients': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all clients */
    get: operations['ClientsController_findAll'];
    put?: never;
    /** Create a new client profile */
    post: operations['ClientsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clients/my-profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current client profile */
    get: operations['ClientsController_getMyProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clients/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get client by ID */
    get: operations['ClientsController_findOne'];
    put?: never;
    post?: never;
    /** Delete client */
    delete: operations['ClientsController_remove'];
    options?: never;
    head?: never;
    /** Update client */
    patch: operations['ClientsController_update'];
    trace?: never;
  };
  '/clients/assign-coach': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Assign coach to client */
    post: operations['ClientsController_assignCoach'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all sessions */
    get: operations['SessionsController_findAll'];
    put?: never;
    /** Create a new session */
    post: operations['SessionsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions/upcoming': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get upcoming sessions */
    get: operations['SessionsController_getUpcomingSessions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get session statistics */
    get: operations['SessionsController_getSessionStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions/check-availability': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Check coach availability */
    post: operations['SessionsController_checkAvailability'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get session by ID */
    get: operations['SessionsController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update session */
    patch: operations['SessionsController_update'];
    trace?: never;
  };
  '/sessions/{id}/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cancel session */
    post: operations['SessionsController_cancel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions/{id}/feedback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add session feedback */
    post: operations['SessionsController_addFeedback'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar/connect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Connect Google Calendar */
    post: operations['CalendarController_connectCalendar'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar/sync': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Sync calendar events */
    post: operations['CalendarController_syncCalendar'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar/auth-url': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Google Calendar OAuth URL */
    get: operations['CalendarController_getAuthUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/team/assign-coach': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Assign coach to client (Team only) */
    post: operations['TeamController_assignCoach'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    SuccessResponseDto: {
      /** @example true */
      ok: boolean;
      data?: Record<string, never>;
      /** @example req-123456 */
      meta: Record<string, never>;
    };
    RegisterDto: {
      /** @example user@example.com */
      email: string;
      /** @example password123 */
      password: string;
      /** @example John Doe */
      name: string;
      /** @example +1234567890 */
      phone: string;
      /**
       * @example client
       * @enum {string}
       */
      role?: 'admin' | 'team' | 'coach' | 'client';
    };
    AuthTokensDto: {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
      accessToken: string;
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
      refreshToken: string;
      /** @example 2024-01-01T12:00:00.000Z */
      expiresAt: string;
    };
    UserProfileDto: {
      /** @example 507f1f77bcf86cd799439011 */
      id: string;
      /** @example user@example.com */
      email: string;
      /** @example John Doe */
      name: string;
      /** @example +1234567890 */
      phone: string;
      /**
       * @example client
       * @enum {string}
       */
      role: 'admin' | 'team' | 'coach' | 'client'| 'parent';
      /** @example active */
      status: string;
      /** @example 2024-01-01T12:00:00.000Z */
      createdAt: string;
      /** @example 2024-01-01T12:00:00.000Z */
      updatedAt: string;
    };
    LoginResponseDto: {
      tokens: components['schemas']['AuthTokensDto'];
      user: components['schemas']['UserProfileDto'];
    };
    LoginDto: {
      /** @example user@example.com */
      email: string;
      /** @example password123 */
      password: string;
    };
    RefreshTokenDto: {
      /** @example refresh-token-here */
      refreshToken: string;
    };
    ChangePasswordDto: {
      /** @example currentPassword123 */
      currentPassword: string;
      /** @example newPassword123 */
      newPassword: string;
    };
    ForgotPasswordDto: {
      /** @example user@example.com */
      email: string;
    };
    ResetPasswordDto: {
      /** @example reset-token-here */
      token: string;
      /** @example newPassword123 */
      newPassword: string;
    };
    AvailabilityRulesDto: {
      workingDays: string[];
      workingHours: Record<string, never>;
      timezone: string;
      maxSessionsPerDay?: number;
      maxSessionsPerWeek?: number;
      breakTimeBetweenSessions?: number;
    };
    SessionTypeDto: {
      type: string;
      duration: number;
      price: number;
    };
    SocialMediaDto: {
      instagram?: string;
      linkedin?: string;
      website?: string;
    };
    CreateCoachDto: {
      userId: string;
      specialties: string[];
      bio?: string;
      certifications?: string[];
      yearsOfExperience?: number;
      education?: string[];
      availabilityRules?: components['schemas']['AvailabilityRulesDto'];
      hourlyRate?: number;
      sessionTypes?: components['schemas']['SessionTypeDto'][];
      status?: string;
      /** @default true */
      acceptingNewClients: boolean;
      notes?: string;
      socialMedia?: components['schemas']['SocialMediaDto'];
      portfolioImages?: string[];
      /** @default true */
      emailNotifications: boolean;
      /** @default true */
      smsNotifications: boolean;
      preferredLanguage?: string;
    };
    UpdateCoachDto: {
      specialties?: string[];
      bio?: string;
      certifications?: string[];
      yearsOfExperience?: number;
      education?: string[];
      availabilityRules?: components['schemas']['AvailabilityRulesDto'];
      hourlyRate?: number;
      sessionTypes?: components['schemas']['SessionTypeDto'][];
      status?: string;
      acceptingNewClients?: boolean;
      notes?: string;
      socialMedia?: components['schemas']['SocialMediaDto'];
      portfolioImages?: string[];
      emailNotifications?: boolean;
      smsNotifications?: boolean;
      preferredLanguage?: string;
    };
    AddressDto: {
      street?: string;
      city?: string;
      state?: string;
      zipCode?: string;
      country?: string;
    };
    EmergencyContactDto: {
      name: string;
      relationship: string;
      phone: string;
      email?: string;
    };
    CreateClientDto: {
      userId: string;
      dateOfBirth?: string;
      gender?: string;
      address?: components['schemas']['AddressDto'];
      goals?: string[];
      fitnessLevel?: string;
      medicalConditions?: string[];
      dietaryRestrictions?: string[];
      preferredWorkoutTimes?: string[];
      preferredWorkoutTypes?: string[];
      assignedCoachId?: string;
      tags?: string[];
      notes?: string;
      emergencyContact?: components['schemas']['EmergencyContactDto'];
      /** @default true */
      emailNotifications: boolean;
      /** @default true */
      smsNotifications: boolean;
      preferredLanguage?: string;
    };
    UpdateClientDto: {
      dateOfBirth?: string;
      gender?: string;
      address?: components['schemas']['AddressDto'];
      goals?: string[];
      fitnessLevel?: string;
      medicalConditions?: string[];
      dietaryRestrictions?: string[];
      preferredWorkoutTimes?: string[];
      preferredWorkoutTypes?: string[];
      assignedCoachId?: string;
      tags?: string[];
      status?: string;
      notes?: string;
      emergencyContact?: components['schemas']['EmergencyContactDto'];
      emailNotifications?: boolean;
      smsNotifications?: boolean;
      preferredLanguage?: string;
    };
    AssignCoachDto: {
      clientId: string;
      coachId: string;
    };
    CreateSessionDto: {
      clientId: string;
      coachId: string;
      startsAt: string;
      endsAt: string;
      location?: string;
      notes?: string;
      sessionType?: string;
      price?: number;
      tags?: string[];
    };
    CheckAvailabilityDto: {
      coachId: string;
      startsAt: string;
      endsAt: string;
    };
    UpdateSessionDto: {
      startsAt?: string;
      endsAt?: string;
      /** @enum {string} */
      status?:
        | 'scheduled'
        | 'completed'
        | 'canceled'
        | 'no_show'
        | 'in_progress';
      location?: string;
      notes?: string;
      sessionType?: string;
      price?: number;
      paymentStatus?: string;
      cancelReason?: string;
      tags?: string[];
    };
    CancelSessionDto: {
      reason: string;
    };
    SessionFeedbackDto: {
      rating: number;
      comments?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Service is healthy */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SuccessResponseDto'];
        };
      };
    };
  };
  AuthController_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterDto'];
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponseDto'];
        };
      };
      /** @description User already exists */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponseDto'];
        };
      };
      /** @description Invalid credentials */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshTokenDto'];
      };
    };
    responses: {
      /** @description Token refreshed successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthTokensDto'];
        };
      };
      /** @description Invalid refresh token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Logout successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_getProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User profile retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserProfileDto'];
        };
      };
    };
  };
  AuthController_changePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto'];
      };
    };
    responses: {
      /** @description Password changed successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_forgotPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ForgotPasswordDto'];
      };
    };
    responses: {
      /** @description Password reset email sent */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_resetPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordDto'];
      };
    };
    responses: {
      /** @description Password reset successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findAll: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        status?: unknown;
        role?: 'admin' | 'team' | 'coach' | 'client';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Users retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserProfileDto'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserProfileDto'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_findAll: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        acceptingNewClients?: boolean;
        status?: unknown;
        specialties?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Coaches retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCoachDto'];
      };
    };
    responses: {
      /** @description Coach created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_getAvailableCoaches: {
    parameters: {
      query?: {
        date?: unknown;
        timeSlot?: unknown;
        specialties?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Available coaches retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_getMyProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Coach profile retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Coach retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Coach not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Coach deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCoachDto'];
      };
    };
    responses: {
      /** @description Coach updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Coach not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CoachesController_getCoachStats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Coach statistics retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_findAll: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        status?: unknown;
        tags?: string[];
        assignedCoachId?: unknown;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Clients retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateClientDto'];
      };
    };
    responses: {
      /** @description Client created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_getMyProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Client profile retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Client retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Client not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Client deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateClientDto'];
      };
    };
    responses: {
      /** @description Client updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Client not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientsController_assignCoach: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignCoachDto'];
      };
    };
    responses: {
      /** @description Coach assigned successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_findAll: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        dateTo?: unknown;
        dateFrom?: unknown;
        status?:
          | 'scheduled'
          | 'completed'
          | 'canceled'
          | 'no_show'
          | 'in_progress';
        coachId?: unknown;
        clientId?: unknown;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Sessions retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSessionDto'];
      };
    };
    responses: {
      /** @description Session created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_getUpcomingSessions: {
    parameters: {
      query?: {
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Upcoming sessions retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_getSessionStats: {
    parameters: {
      query?: {
        coachId?: string;
        period?: 'week' | 'month' | 'year';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Session statistics retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_checkAvailability: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CheckAvailabilityDto'];
      };
    };
    responses: {
      /** @description Availability checked successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Session retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Session not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSessionDto'];
      };
    };
    responses: {
      /** @description Session updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Session not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_cancel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelSessionDto'];
      };
    };
    responses: {
      /** @description Session canceled successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Session not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SessionsController_addFeedback: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionFeedbackDto'];
      };
    };
    responses: {
      /** @description Feedback added successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Session not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CalendarController_connectCalendar: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Calendar connected successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CalendarController_syncCalendar: {
    parameters: {
      query?: {
        userId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Calendar synced successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CalendarController_getAuthUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OAuth URL generated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TeamController_assignCoach: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignCoachDto'];
      };
    };
    responses: {
      /** @description Coach assigned successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
